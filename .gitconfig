[user]
  name = Emil Lerch
  email = emil@lerch.org
[alias]
  co          = checkout
  s           = status
  l           = !git log --color --graph --pretty=format:'%Cred%h%Creset %G?%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  logall      = !git log --color --graph --pretty=format:'%Cred%h%Creset %G?%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $(git reflog | awk '{print $1}')
  tgz         = !"f() { dir=${PWD##*/}.tgz; git archive --format tar.gz --prefix ${PWD##*/}/ -o ${1:-$dir} ${2:-HEAD}; }; f"
  ls          = rev-list --objects -g --no-walk --all
  start       = !git init && git commit --allow-empty -m \"initial commit\" && touch README.md && curl -sL https://raw.githubusercontent.com/elerch/docker-ttrss-update-daemon/master/LICENSE -o LICENSE && perl -pi -e  \"s/2017/$(date +%Y)/\" LICENSE
  license-mit = !curl -sL https://raw.githubusercontent.com/elerch/docker-ttrss-update-daemon/master/LICENSE -o LICENSE && perl -pi -e  \"s/2017/$(date +%Y)/\" LICENSE && git add LICENSE
  aliases     = config --get-regexp '^alias\\.'
  pushall     = !"for remote in $(git remote); do git push $remote; done"
  sshify      = "!f() { git remote set-url --push ${1:-"origin"} \
    $(git remote get-url ${1:-"origin"} | \
      sed 's/https:\\/\\//git@/' | \
      sed 's/\\//:/'); \
    }; f"
  pr-ls = "!f() { \
    if [ -n \"$1\" ]; then \
      REMOTE=$1; \
    else \
      GITHUB_REMOTE=$(git remote -v | grep github.com | head -n 1 | awk '{print $1}'); \
      if [ -z \"$GITHUB_REMOTE\" ]; then \
        echo \"Error: No GitHub remote found and none specified\"; \
        return 1; \
      fi; \
      REMOTE=$GITHUB_REMOTE; \
    fi; \
    REPO_URL=$(git remote get-url $REMOTE); \
    if [[ $REPO_URL == *\"github.com\"* ]]; then \
      if [[ $REPO_URL == git@github.com:* ]]; then \
        REPO_PATH=$(echo $REPO_URL | sed 's/git@github.com://; s/\\.git$//'); \
      else \
        REPO_PATH=$(echo $REPO_URL | sed 's/https:\\/\\/github.com\\///; s/\\.git$//'); \
      fi; \
      curl -s \"https://api.github.com/repos/$REPO_PATH/pulls?state=open\" | jq -r '.[] | \"#\\(.number): \\(.title)\"'; \
    else \
      echo \"Error: Remote $REMOTE is not a GitHub repository or has an unsupported URL format: $REPO_URL\"; \
      return 1; \
    fi; \
    }; f"
  pr-fetch = "!f() { \
    if [[ $1 =~ ^[0-9]+$ ]]; then \
      PR_NUMBER=$1; \
      BRANCH_NAME=$2; \
      REMOTE=\"\"; \
    else \
      REMOTE=$1; \
      PR_NUMBER=$2; \
      BRANCH_NAME=$3; \
    fi; \
    if [ -z \"$PR_NUMBER\" ]; then \
      echo \"Error: PR number is required\"; \
      echo \"Usage: git pr-fetch [REMOTE] PR_NUMBER [BRANCH_NAME]\"; \
      return 1; \
    fi; \
    if [ -z \"$BRANCH_NAME\" ]; then \
      BRANCH_NAME=\"pr-$PR_NUMBER\"; \
    fi; \
    if [ -z \"$REMOTE\" ]; then \
      GITHUB_REMOTE=$(git remote -v | grep github.com | head -n 1 | awk '{print $1}'); \
      if [ -z \"$GITHUB_REMOTE\" ]; then \
        echo \"Error: No GitHub remote found and none specified\"; \
          return 1; \
      fi; \
      REMOTE=$GITHUB_REMOTE; \
    fi; \
    echo \"Fetching PR #$PR_NUMBER from $REMOTE into branch $BRANCH_NAME...\"; \
    git fetch $REMOTE pull/$PR_NUMBER/head:$BRANCH_NAME && \
    echo \"PR #$PR_NUMBER fetched to branch $BRANCH_NAME\"; \
  }; f"
[column]
  ui = auto
[commit]
  verbose = true
[branch]
  sort = -committerdate
[tag]
  sort = version:refname
[push]
  default = simple
[diff]
  tool = extDiff #kdiff3
  guitool = meld
  algorithm = histogram
  colorMoved = default
  renames = true
  mnemonicPrefix = true
[difftool "extDiff"]
  cmd = "extDiff \"$LOCAL\" \"$REMOTE\""
[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"
[mergetool "meld"]
    # Choose one of these 2 lines
    #cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[core]
  pager = gitpager
[pull]
  ff = only
[include] # This requires >=1.7.10
  path = .gitsigning
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
  defaultBranch = master
[help]
  autocorrect = prompt
[merge]
  conflictstyle = zdiff3
  tool = nvimdiff
  guitool = meld
[delta]
  navigate = true
  dark = true
  line-numbers = true
  syntax-theme = Monokai Extended
